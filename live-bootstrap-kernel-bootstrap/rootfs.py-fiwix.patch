diff --git a/rootfs.py b/rootfs.py
index 8816b40..146082d 100755
--- a/rootfs.py
+++ b/rootfs.py
@@ -15,6 +15,7 @@ you can run bootstap inside chroot.
 
 import argparse
 import os
+import subprocess
 
 from sysa import SysA
 from sysc import SysC
@@ -34,6 +35,10 @@ def create_configuration_file(args):
         config.write("CHROOT_ONLY_SYSA=" + str(args.bwrap) + "\n")
         config.write("UPDATE_CHECKSUMS=" + str(args.update_checksums) + "\n")
         config.write("DISK=sda1\n")
+        if args.chroot or args.kernel:
+            config.write("KERNEL_BOOTSTRAP=False\n")
+        else:
+            config.write("KERNEL_BOOTSTRAP=True\n")
 
 # pylint: disable=too-many-statements
 def main():
@@ -81,8 +86,11 @@ def main():
                         default="qemu-system-x86_64")
     parser.add_argument("-qr", "--qemu-ram", help="Memory (in megabytes) allocated to QEMU VM",
                         default=4096)
-    parser.add_argument("-qk", "--kernel", help="Kernel to use (default is ./kernel)",
-                        default="kernel")
+    parser.add_argument("-qk", "--kernel", help="Kernel to use (default is ./kernel)")
+    parser.add_argument("-qfr", "--kernel-fiwix-rd", help="The kernel is Fiwix using a ramd rive",
+                        action="store_true")
+    parser.add_argument("-qfh", "--kernel-fiwix-hd", help="The kernel is Fiwix using a hard dive",
+                        action="store_true")
 
     parser.add_argument("-b", "--bare-metal", help="Build images for bare metal",
                         action="store_true")
@@ -108,6 +116,10 @@ def main():
     if check_types() == 0:
         raise ValueError("One of qemu, chroot, bwrap, or bare metal must be selected.")
 
+    if not args.kernel and os.path.isfile("kernel"):
+        print("WARNING: Implicit use of a provided kernel is DEPRECATED. Use the --kernel option!")
+        args.kernel = "kernel"
+
     # Arch validation
     if args.arch != "x86":
         raise ValueError("Only x86 is supported at the moment.")
@@ -199,27 +211,47 @@ print(shutil.which('chroot'))
                      '/init')
 
     elif args.bare_metal:
-        system_c.prepare(create_disk_image=True)
-        system_a.prepare(create_initramfs=True)
-
-        print("Please:")
-        print("  1. Take tmp/sysa/initramfs and your kernel, boot using this.")
-        print("  2. Take tmp/sysc/disk.img and put this on a writable storage medium.")
+        if args.kernel:
+            system_c.prepare(create_disk_image=True)
+            system_a.prepare(create_initramfs=True)
+            print("Please:")
+            print("  1. Take tmp/sysa/initramfs and your kernel, boot using this.")
+            print("  2. Take tmp/sysc/disk.img and put this on a writable storage medium.")
+        else:
+            system_a.prepare(create_initramfs=True, kernel_bootstrap=True)
+            print("Please:")
+            print("  1. Take tmp/sysa/sysa.img and write it to a boot drive and then boot it.")
 
     else:
-        system_c.prepare(create_disk_image=True)
-        system_a.prepare(create_initramfs=True)
-
-        run(args.qemu_cmd,
-            '-enable-kvm',
-            '-m', str(args.qemu_ram) + 'M',
-            '-no-reboot',
-            '-hda', tmpdir.get_disk("sysc"),
-            '-nic', 'user,ipv6=off,model=e1000',
-            '-kernel', args.kernel,
-            '-initrd', system_a.initramfs_path,
-            '-nographic',
-            '-append', 'console=ttyS0')
+        if args.kernel:
+            system_c.prepare(create_disk_image=True)
+            system_a.prepare(create_initramfs=True, format_ext2=(args.kernel_fiwix_rd or args.kernel_fiwix_hd))
+
+            if args.kernel_fiwix_rd:
+                subprocess.run(["./bootfiwix-rd"])
+            elif args.kernel_fiwix_hd:
+                subprocess.run(["./bootfiwix-hd"])
+            else:
+                run(args.qemu_cmd,
+                    '-enable-kvm',
+                    '-m', str(args.qemu_ram) + 'M',
+                    '-no-reboot',
+                    '-hda', tmpdir.get_disk("sysc"),
+                    '-nic', 'user,ipv6=off,model=e1000',
+                    '-kernel', args.kernel,
+                    '-initrd', system_a.initramfs_path,
+                    '-nographic',
+                    '-append', 'console=ttyS0')
+        else:
+            system_a.prepare(create_initramfs=True, kernel_bootstrap=True)
+            run(args.qemu_cmd,
+                '-enable-kvm',
+                '-m', "4G",
+                '-no-reboot',
+                '-drive', 'file=' + os.path.join(system_a.tmp_dir, 'sysa.img') + ',format=raw',
+                '-machine', 'kernel-irqchip=split',
+                '-nic', 'user,ipv6=off,model=e1000',
+                '-nographic')
 
 if __name__ == "__main__":
     main()
